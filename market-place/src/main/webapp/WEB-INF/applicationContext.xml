<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- Specifying base package of the Components like Controller, Service, 
		DAO -->

	<context:annotation-config />
	<context:component-scan base-package="com.mili" />

	<tx:annotation-driven transaction-manager="transactionManager"/>


	<!-- Getting Database properties -->
	<context:property-placeholder location="classpath:application.properties" />

	<mvc:annotation-driven />

	<!-- Specifying the Resource location to load JS, CSS, Images etc -->
	<mvc:resources location="/files/" mapping="/resources/**"></mvc:resources>

	<!-- DataSource -->
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		id="dataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.user}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mappingResources">
			<list>
				<value>com/mili/onlineShopping/model/Category.hbm.xml</value>
				<value>com/mili/onlineShopping/model/Product.hbm.xml</value>
				<value>com/mili/onlineShopping/model/UserDetail.hbm.xml</value>
				<value>com/mili/onlineShopping/model/Address.hbm.xml</value>
				<value>com/mili/onlineShopping/model/Cart.hbm.xml</value>
				<value>com/mili/onlineShopping/model/CartItem.hbm.xml</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>

	</bean>

	<!-- Transaction -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


<!-- <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/> -->

	<security:http pattern="/resources/**" security="none"/> 
	
	<security:http>
  	<security:intercept-url pattern="/manage/**" access="hasAuthority('ADMIN')"/> 
  	<security:intercept-url pattern="/cart/**" access="hasAuthority('USER')"/> 
 		<security:intercept-url pattern="/**" access="permitAll"/> 
		<security:form-login login-page="/login"/>
		<security:access-denied-handler error-page="/access-denied"/>
	</security:http>


	<security:authentication-manager>
		<security:authentication-provider>
<!-- 		<security:password-encoder ref="passwordEncoder"/> -->
			<security:jdbc-user-service data-source-ref="dataSource" 
			users-by-username-query="select EMAIL,PASSWORD,ENABLE from user_detail where email = ?"
			authorities-by-username-query="select EMAIL,ROLE from user_detail where email = ?"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>